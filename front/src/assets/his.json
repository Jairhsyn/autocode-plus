[
  {
    "sysConfig": {
      "replaceAll": true,
      "rootDir": "temp",
      "sourcePath": "/src/main/java/",
      "resourcePath": "/src/main/resources/",
      "modelPackage": "com.ke.huaqiao.server.entity",
      "servicePackage": "com.ke.huaqiao.server.service.base",
      "daoPackage": "com.ke.huaqiao.server.service.base",
      "mapperPath": "mybatis/mappers",
      "tablePrefixes": [
        "t_"
      ],
      "tables": [
        "t_lecture"
      ]
    },
    "extConfig": {
      "daoEnable": true,
      "daoFiles": [
        {
          "index": "0",
          "type": "dao",
          "name": "dao_cls.ftl",
          "content": "package ${context.daoPackage};\r\n\r\nimport ${ext.daoManagerPackage}.${ext.daoManagerName};\r\nimport ${context.modelPackage}.${model.modelName};\r\n<#if !model.primaryKeyCol.javaClass.name?starts_with(\"java.lang.\")>\r\n\r\nimport ${model.primaryKeyCol.javaClass.name};\r\n</#if>\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * @author Washmore\r\n * @version V1\r\n * @summary ${model.tableName}表<#if 0 < model.tableComment?length>(</#if>${model.tableComment}<#if 0 < model.tableComment?length>)</#if>的dao默认模板\r\n * @Copyright (c) ${.now?date?string[\"yyyy\"]}, Washmore All Rights Reserved.\r\n * @since ${.now?date?string[\"yyyy年MM月dd日\"]}\r\n */\r\npublic abstract class X${model.modelName}Dao extends ${ext.daoManagerName} {\r\n    /**\r\n     * 区分不同命名空间的同名sql\r\n     *\r\n     * @return\r\n     */\r\n    protected String mapper() {\r\n        return \"${model.modelName}Mapper\";\r\n    }\r\n\r\n    /**\r\n     * 多条件组合查询符合条件的${model.modelName}对象列表,支持分页查询(使用start和offset参数)\r\n     *\r\n     * @param params 组合条件\r\n     * @return 符合查询条件的${model.modelName}对象列表\r\n     */\r\n    public List<${model.modelName}> selectByMap(Map<String, Object> params) {\r\n        return ${ext.sqlSessionCommon}.selectList(st(\"selectByMap\"), params);\r\n    }\r\n\r\n    /**\r\n     * 多条件组合查询符合条件的${model.modelName}对象总量\r\n     *\r\n     * @param params 组合条件\r\n     * @return 符合查询条件的${model.modelName}对象数量\r\n     */\r\n    public int countByMap(Map<String, Object> params) {\r\n        return ${ext.sqlSessionCommon}.selectOne(st(\"countByMap\"), params);\r\n    }\r\n\r\n    /**\r\n     * 按照样例查询符合条件的${model.modelName}对象列表,不支持分页查询\r\n     *\r\n     * @param example 样例\r\n     * @return 符合查询条件的${model.modelName}对象列表\r\n     */\r\n    public List<${model.modelName}> selectByExample(${model.modelName} example) {\r\n        return ${ext.sqlSessionCommon}.selectList(st(\"selectByExample\"), example);\r\n    }\r\n\r\n    /**\r\n     * 按照样例查询符合条件的${model.modelName}对象总量\r\n     *\r\n     * @param example 样例\r\n     * @return 符合查询条件的${model.modelName}对象数量\r\n     */\r\n    public int countByExample(${model.modelName} example) {\r\n        return ${ext.sqlSessionCommon}.selectOne(st(\"countByExample\"), example);\r\n    }\r\n\r\n    /**\r\n     * 批量插入${model.modelName}(全量字段)对象列表\r\n     *\r\n     * @param list ${model.modelName}对象列表\r\n     * @return 受影响行数\r\n     */\r\n    public int batchInsert(List<${model.modelName}> list) {\r\n        return ${ext.sqlSessionCommon}.insert(st(\"batchInsert\"), list);\r\n    }\r\n\r\n    /**\r\n     * 插入${model.modelName}(非空字段)对象\r\n     *\r\n     * @param ${model.modelName?uncap_first} ${model.modelName}对象\r\n     * @return 受影响行数\r\n     */\r\n    public int insertSelective(${model.modelName} ${model.modelName?uncap_first}) {\r\n        return ${ext.sqlSessionCommon}.insert(st(\"insertSelective\"), ${model.modelName?uncap_first});\r\n    }\r\n<#if model.primaryKeyCol??>\r\n\r\n    /**\r\n     * 根据主键${model.primaryKeyCol.fieldName}查询${model.modelName}对象\r\n     *\r\n     * @param ${model.primaryKeyCol.fieldName} 主键\r\n     * @return ${model.modelName}对象(允许为空)\r\n     */\r\n    public ${model.modelName} selectByPrimaryKey(${model.primaryKeyCol.javaClass.simpleName} ${model.primaryKeyCol.fieldName}) {\r\n        return ${ext.sqlSessionCommon}.selectOne(st(\"selectByPrimaryKey\"), ${model.primaryKeyCol.fieldName});\r\n    }\r\n\r\n    /**\r\n     * 根据主键${model.primaryKeyCol.fieldName}更新${model.modelName}(非空字段)对象\r\n     *\r\n     * @param ${model.modelName?uncap_first} 待更新${model.modelName}对象\r\n     * @return 受影响行数\r\n     */\r\n    public int updateByPrimaryKeySelective(${model.modelName} ${model.modelName?uncap_first}) {\r\n        return ${ext.sqlSessionCommon}.update(st(\"updateByPrimaryKeySelective\"), ${model.modelName?uncap_first});\r\n    }\r\n\r\n    /**\r\n     * 根据主键${model.primaryKeyCol.fieldName}删除${model.modelName}\r\n     *\r\n     * @param ${model.primaryKeyCol.fieldName} 主键\r\n     * @return 受影响行数\r\n     */\r\n    public int deleteByPrimaryKey(${model.primaryKeyCol.javaClass.simpleName} ${model.primaryKeyCol.fieldName}) {\r\n        return ${ext.sqlSessionCommon}.delete(st(\"deleteByPrimaryKey\"), ${model.primaryKeyCol.fieldName});\r\n    }\r\n\r\n    /**\r\n     * 根据主键${model.primaryKeyCol.fieldName}批量删除${model.modelName}\r\n     *\r\n     * @param list 主键列表\r\n     * @return 受影响行数\r\n     */\r\n    public int batchDeleteByPrimaryKey(List<${model.primaryKeyCol.javaClass.simpleName}> list) {\r\n        if (list == null || list.isEmpty()) {\r\n            return 0;\r\n        }\r\n        return ${ext.sqlSessionCommon}.delete(st(\"batchDeleteByPrimaryKey\"), list);\r\n    }\r\n</#if>\r\n<#if model.uniqueKeyCols??>\r\n    <#list model.uniqueKeyCols as uniqueKeyCol>\r\n\t\r\n    /**\r\n     * 根据${uniqueKeyCol.fieldName}字段查询${model.modelName}对象\r\n     *\r\n     * @param ${uniqueKeyCol.fieldName} ${uniqueKeyCol.coloumComment} \r\n     * @return ${model.modelName}对象(允许为空)\r\n     */\r\n    public ${model.modelName} selectBy${uniqueKeyCol.fieldName?cap_first}(${uniqueKeyCol.javaClass.simpleName} ${uniqueKeyCol.fieldName}) {\r\n        return ${ext.sqlSessionCommon}.selectOne(st(\"selectBy${uniqueKeyCol.fieldName?cap_first}\"), ${uniqueKeyCol.fieldName});\r\n    }\r\n\r\n    /**\r\n     * 根据${uniqueKeyCol.fieldName}字段更新${model.modelName}(非空字段)对象\r\n     *\r\n     * @param ${model.modelName?uncap_first} 待更新${model.modelName}对象\r\n     * @return 受影响行数\r\n     */\r\n    public int updateBy${uniqueKeyCol.fieldName?cap_first}Selective(${model.modelName} ${model.modelName?uncap_first}) {\r\n        return ${ext.sqlSessionCommon}.update(st(\"updateBy${uniqueKeyCol.fieldName?cap_first}Selective\"), ${model.modelName?uncap_first});\r\n    }\r\n\r\n    /**\r\n     * 根据${uniqueKeyCol.fieldName}字段删除${model.modelName}对象\r\n     *\r\n     * @param ${uniqueKeyCol.fieldName} ${uniqueKeyCol.coloumComment}\r\n     * @return 受影响行数\r\n     */\r\n    public int deleteBy${uniqueKeyCol.fieldName?cap_first}(${uniqueKeyCol.javaClass.simpleName} ${uniqueKeyCol.fieldName}) {\r\n        return ${ext.sqlSessionCommon}.delete(st(\"deleteBy${uniqueKeyCol.fieldName?cap_first}\"), ${uniqueKeyCol.fieldName});\r\n    }\r\n    </#list>\r\n</#if>\r\n<#if model.foreignKeyCols??>\r\n    <#list model.foreignKeyCols as foreignKeyCol>\r\n\r\n    /**\r\n     * 根据${foreignKeyCol.fieldName}字段查询${model.modelName}对象列表\r\n     *\r\n     * @param ${foreignKeyCol.fieldName} ${foreignKeyCol.coloumComment}\r\n     * @return ${model.modelName}对象(允许为空)\r\n     */\r\n    public List<${model.modelName}> selectBy${foreignKeyCol.fieldName?cap_first}(${foreignKeyCol.javaClass.simpleName} ${foreignKeyCol.fieldName}) {\r\n\t\treturn ${ext.sqlSessionCommon}.selectOne(st(\"selectBy${foreignKeyCol.fieldName?cap_first}\"), ${foreignKeyCol.fieldName});\r\n    }\r\n\r\n    /**\r\n     * 根据${foreignKeyCol.fieldName}字段更新${model.modelName}(非空字段)对象\r\n     *\r\n     * @param ${model.modelName?uncap_first} 待更新${model.modelName}对象\r\n     * @return 受影响行数\r\n     */\r\n    public int updateBy${foreignKeyCol.fieldName?cap_first}Selective(${model.modelName} ${model.modelName?uncap_first}) {\r\n\t\treturn ${ext.sqlSessionCommon}.update(st(\"updateBy${foreignKeyCol.fieldName?cap_first}Selective\"), ${model.modelName?uncap_first});\r\n    }\r\n\r\n    /**\r\n     * 根据${foreignKeyCol.fieldName}字段删除${model.modelName}对象\r\n     *\r\n     * @param ${foreignKeyCol.fieldName} ${foreignKeyCol.coloumComment}\r\n     * @return 受影响行数\r\n     */\r\n    public int deleteBy${foreignKeyCol.fieldName?cap_first}(${foreignKeyCol.javaClass.simpleName} ${foreignKeyCol.fieldName}) {\r\n\t\treturn ${ext.sqlSessionCommon}.delete(st(\"deleteBy${foreignKeyCol.fieldName?cap_first}\"), ${foreignKeyCol.fieldName});\r\n    }\r\n    </#list>\r\n</#if>\r\n\r\n    /**\r\n     * 根据多条件组合批量删除${model.modelName}\r\n     *\r\n     * @param params 组合条件\r\n     * @return 受影响行数\r\n     */\r\n    public int deleteByMap(Map<String, Object> params) {\r\n        if (params == null || params.isEmpty() || params.values().stream().noneMatch(Objects::nonNull)) {\r\n            return 0;\r\n        }\r\n        return ${ext.sqlSessionCommon}.delete(st(\"deleteByMap\"), params);\r\n    }\r\n<#if model.primaryKeyCol??>\r\n\r\n    /**\r\n     * 根据主键${model.primaryKeyCol.fieldName}查询${model.modelName}对象(从只读数据源)\r\n     *\r\n     * @param ${model.primaryKeyCol.fieldName} 主键\r\n     * @return ${model.modelName}对象(允许为空)\r\n     */\r\n    public ${model.modelName} selectByPrimaryKeyReadOnly(${model.primaryKeyCol.javaClass.simpleName} ${model.primaryKeyCol.fieldName}) {\r\n        return ${ext.sqlSessionReadonly}.selectOne(st(\"selectByPrimaryKey\"), ${model.primaryKeyCol.fieldName});\r\n    }\r\n</#if>\r\n\r\n    /**\r\n     * 多条件组合查询符合条件的${model.modelName}对象列表,支持分页查询(使用start和offset参数)(从只读数据源)\r\n     *\r\n     * @param params 组合条件\r\n     * @return 符合查询条件的${model.modelName}对象列表\r\n     */\r\n    public List<${model.modelName}> selectByMapReadOnly(Map<String, Object> params) {\r\n        return ${ext.sqlSessionReadonly}.selectList(st(\"selectByMap\"), params);\r\n    }\r\n\r\n    /**\r\n     * 多条件组合查询符合条件的${model.modelName}对象总量(从只读数据源)\r\n     *\r\n     * @param params 组合条件\r\n     * @return 符合查询条件的${model.modelName}对象数量\r\n     */\r\n    public int countByMapReadOnly(Map<String, Object> params) {\r\n        return ${ext.sqlSessionReadonly}.selectOne(st(\"countByMap\"), params);\r\n    }\r\n\r\n    /**\r\n     * 按照样例查询符合条件的${model.modelName}对象列表,不支持分页查询(从只读数据源)\r\n     *\r\n     * @param example 样例\r\n     * @return 符合查询条件的${model.modelName}对象列表\r\n     */\r\n    public List<${model.modelName}> selectByExampleReadOnly(${model.modelName} example) {\r\n        return ${ext.sqlSessionReadonly}.selectList(st(\"selectByExample\"), example);\r\n    }\r\n\r\n    /**\r\n     * 按照样例查询符合条件的${model.modelName}对象总量(从只读数据源)\r\n     *\r\n     * @param example 样例\r\n     * @return 符合查询条件的${model.modelName}对象数量\r\n     */\r\n    public int countByExampleReadOnly(${model.modelName} example) {\r\n        return ${ext.sqlSessionReadonly}.selectOne(st(\"countByExample\"), example);\r\n    }\r\n}",
          "fileNameExpression": "X${model.modelName}Dao.java",
          "uid": 1566219327146,
          "status": "success"
        },
        {
          "index": "0",
          "type": "dao",
          "name": "dao_empty.ftl",
          "content": "package ${context.daoPackage};\r\n\r\nimport org.springframework.stereotype.Repository;\r\n\r\n/**\r\n * @author Washmore\r\n * @version V1\r\n * @summary ${model.tableName}表<#if 0 < model.tableComment?length>(</#if>${model.tableComment}<#if 0 < model.tableComment?length>)</#if>的dao\r\n * @Copyright (c) ${.now?date?string[\"yyyy\"]}, Washmore All Rights Reserved.\r\n * @since ${.now?date?string[\"yyyy年MM月dd日\"]}\r\n */\r\n@Repository\r\npublic class ${model.modelName}Dao extends X${model.modelName}Dao {\r\n    //Fill By User\r\n}",
          "fileNameExpression": "${model.modelName}Dao.java",
          "uid": 1566219327147,
          "status": "success"
        }
      ],
      "daoFileNames": [
        "X${model.modelName}Dao.java",
        "${model.modelName}Dao.java"
      ],
      "mapperEnable": true,
      "mapperFiles": [
        {
          "index": "0",
          "type": "mapper",
          "name": "mapper_cls_sensitive.ftl",
          "content": "<#macro hash value>${r\"#{\"}${value}}</#macro>\r\n<#macro dol value>${r\"${\"}${value}}</#macro>\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"${model.modelName}Mapper\">\r\n\r\n    <select id=\"selectByMap\" parameterType=\"Map\" resultMap=\"BaseResultMap\">\r\n        SELECT\r\n            <include refid=\"Base_Column_List\"/>\r\n        FROM `${model.tableOriginalName}`\r\n        <where>\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                AND `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>\r\n            </if>\r\n        </#list>\r\n        </where>\r\n        <#if model.autoIncrementCol??>\r\n        ORDER BY `${model.autoIncrementCol.columnName}` DESC\r\n        </#if>\r\n        <if test=\"start != null and offset != null\">\r\n            LIMIT <@hash \"start\"/>, <@hash \"offset\"/>\r\n        </if>\r\n    </select>\r\n\r\n    <select id=\"countByMap\" parameterType=\"Map\" resultType=\"int\">\r\n        SELECT\r\n            COUNT(*)\r\n        FROM `${model.tableOriginalName}`\r\n        <where>\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                AND `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>\r\n            </if>\r\n        </#list>\r\n        </where>\r\n    </select>\r\n\r\n    <select id=\"selectByExample\" parameterType=\"${context.modelPackage}.${model.modelName}\" resultMap=\"BaseResultMap\">\r\n        SELECT\r\n            <include refid=\"Base_Column_List\"/>\r\n        FROM `${model.tableOriginalName}`\r\n        <where>\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                AND `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>\r\n            </if>\r\n        </#list>\r\n        </where>\r\n        <#if model.autoIncrementCol??>\r\n        ORDER BY `${model.autoIncrementCol.columnName}` DESC\r\n        </#if>\r\n    </select>\r\n\r\n    <select id=\"countByExample\" parameterType=\"${context.modelPackage}.${model.modelName}\" resultType=\"int\">\r\n        SELECT\r\n            COUNT(*)\r\n        FROM `${model.tableOriginalName}`\r\n        <where>\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                AND `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>\r\n            </if>\r\n        </#list>\r\n        </where>\r\n    </select>\r\n\r\n    <insert id=\"batchInsert\" parameterType=\"List\" <#if model.primaryKeyCol??>keyProperty = \"${model.primaryKeyCol.fieldName}\"</#if>>\r\n        INSERT INTO `${model.tableOriginalName}`\r\n            (<include refid=\"Base_Column_List_Without_PrimaryKey\"/>)\r\n        VALUES\r\n        <foreach collection=\"list\" item=\"item\" separator=\",\">\r\n            (<#list model.columnsWithoutPrimaryKey as col><#if !col?is_first>,<#if col?index%4==0>\r\n            <#else>${' '}</#if></#if><@hash \"item.\" + col.fieldName + \",jdbcType=\" + col.jdbcType/></#list>)\r\n        </foreach>\r\n    </insert>\r\n\r\n    <insert id=\"insertSelective\" parameterType=\"${context.modelPackage}.${model.modelName}\" <#if model.primaryKeyCol??>keyProperty = \"${model.primaryKeyCol.fieldName}\"</#if>>\r\n        INSERT INTO `${model.tableOriginalName}`\r\n        <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                `${col.columnName}`,\r\n            </if>\r\n        </#list>\r\n        </trim>\r\n        <trim prefix=\"VALUES (\" suffix=\")\" suffixOverrides=\",\">\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>,\r\n            </if>\r\n        </#list>\r\n        </trim>\r\n    </insert>\r\n<#if model.primaryKeyCol??>\r\n\r\n\t<select id=\"selectByPrimaryKey\" resultMap=\"BaseResultMap\" parameterType=\"<#if model.primaryKeyCol.javaClass.classLoader??>${model.primaryKeyCol.javaClass.name}<#else>${model.primaryKeyCol.javaClass.simpleName}</#if>\">\r\n        SELECT\r\n            <include refid=\"Base_Column_List\"/>\r\n        FROM `${model.tableOriginalName}`\r\n        WHERE `${model.primaryKeyCol.columnName}` = <@hash model.primaryKeyCol.fieldName + \",jdbcType=\" + model.primaryKeyCol.jdbcType/>\r\n    </select>\r\n\r\n    <update id=\"updateByPrimaryKeySelective\" parameterType=\"${context.modelPackage}.${model.modelName}\">\r\n        UPDATE `${model.tableOriginalName}`\r\n        <set>\r\n    <#list model.columns as col>\r\n        <#if model.primaryKeyCol.fieldName != col.fieldName>\r\n            <if test=\"${col.fieldName} != null\">\r\n                `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>,\r\n            </if>\r\n        </#if>\r\n    </#list>\r\n        </set>\r\n        WHERE `${model.primaryKeyCol.columnName}` = <@hash model.primaryKeyCol.fieldName + \",jdbcType=\" + model.primaryKeyCol.jdbcType/>\r\n    </update>\r\n\r\n\t<delete id=\"deleteByPrimaryKey\" parameterType=\"<#if model.primaryKeyCol.javaClass.classLoader??>${model.primaryKeyCol.javaClass.name}<#else>${model.primaryKeyCol.javaClass.simpleName}</#if>\">\r\n        DELETE FROM `${model.tableOriginalName}`\r\n        WHERE `${model.primaryKeyCol.columnName}` = <@hash model.primaryKeyCol.fieldName + \",jdbcType=\" + model.primaryKeyCol.jdbcType/>\r\n    </delete>\r\n\r\n\t<delete id=\"batchDeleteByPrimaryKey\" parameterType=\"List\">\r\n        DELETE FROM `${model.tableOriginalName}`\r\n        <where>\r\n            `${model.primaryKeyCol.columnName}` IN\r\n            <foreach collection=\"list\" item=\"item\" separator=\",\" open=\"(\" close=\")\">\r\n                <@hash \"item\"/>\r\n\t\t\t</foreach>\r\n        </where>\r\n    </delete>\r\n</#if>\r\n<#if model.uniqueKeyCols??>\r\n    <#list model.uniqueKeyCols as uniqueKeyCol>\r\n\r\n\t<select id=\"selectBy${uniqueKeyCol.fieldName?cap_first}\" resultMap=\"BaseResultMap\" parameterType=\"<#if uniqueKeyCol.javaClass.classLoader??>${uniqueKeyCol.javaClass.name}<#else>${uniqueKeyCol.javaClass.simpleName}</#if>\">\r\n        SELECT\r\n            <include refid=\"Base_Column_List\"/>\r\n        FROM `${model.tableOriginalName}`\r\n        WHERE `${uniqueKeyCol.columnName}` = <@hash uniqueKeyCol.fieldName + \",jdbcType=\" + uniqueKeyCol.jdbcType/>\r\n\t\tLIMIT 1\r\n    </select>\r\n\r\n    <update id=\"updateBy${uniqueKeyCol.fieldName?cap_first}Selective\" parameterType=\"${context.modelPackage}.${model.modelName}\">\r\n        UPDATE `${model.tableOriginalName}`\r\n        <set>\r\n    <#list model.columns as col>\r\n        <#if uniqueKeyCol.fieldName != col.fieldName>\r\n\t\t<#if model.primaryKeyCol.fieldName != col.fieldName>\r\n            <if test=\"${col.fieldName} != null\">\r\n                `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>,\r\n            </if>\r\n\t\t</#if>\r\n        </#if>\r\n    </#list>\r\n        </set>\r\n        WHERE `${uniqueKeyCol.columnName}` = <@hash uniqueKeyCol.fieldName + \",jdbcType=\" + uniqueKeyCol.jdbcType/>\r\n    </update>\r\n\r\n\t<delete id=\"deleteBy${uniqueKeyCol.fieldName?cap_first}\" parameterType=\"<#if uniqueKeyCol.javaClass.classLoader??>${uniqueKeyCol.javaClass.name}<#else>${uniqueKeyCol.javaClass.simpleName}</#if>\">\r\n        DELETE FROM `${model.tableOriginalName}`\r\n        WHERE `${uniqueKeyCol.columnName}` = <@hash uniqueKeyCol.fieldName + \",jdbcType=\" + uniqueKeyCol.jdbcType/>\r\n    </delete>\r\n\t</#list>\r\n</#if>\r\n<#if model.foreignKeyCols??>\r\n    <#list model.foreignKeyCols as foreignKeyCol>\r\n\r\n\t<select id=\"selectBy${foreignKeyCol.fieldName?cap_first}\" resultMap=\"BaseResultMap\" parameterType=\"<#if foreignKeyCol.javaClass.classLoader??>${foreignKeyCol.javaClass.name}<#else>${foreignKeyCol.javaClass.simpleName}</#if>\">\r\n        SELECT\r\n            <include refid=\"Base_Column_List\"/>\r\n        FROM `${model.tableOriginalName}`\r\n        WHERE `${foreignKeyCol.columnName}` = <@hash foreignKeyCol.fieldName + \",jdbcType=\" + foreignKeyCol.jdbcType/>\r\n    </select>\r\n\r\n    <update id=\"updateBy${foreignKeyCol.fieldName?cap_first}Selective\" parameterType=\"${context.modelPackage}.${model.modelName}\">\r\n        UPDATE `${model.tableOriginalName}`\r\n        <set>\r\n    <#list model.columns as col>\r\n        <#if foreignKeyCol.fieldName != col.fieldName>\r\n\t\t<#if model.primaryKeyCol.fieldName != col.fieldName>\r\n            <if test=\"${col.fieldName} != null\">\r\n                `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>,\r\n            </if>\r\n\t\t</#if>\r\n        </#if>\r\n    </#list>\r\n        </set>\r\n        WHERE `${foreignKeyCol.columnName}` = <@hash foreignKeyCol.fieldName + \",jdbcType=\" + foreignKeyCol.jdbcType/>\r\n    </update>\r\n\r\n\t<delete id=\"deleteBy${foreignKeyCol.fieldName?cap_first}\" parameterType=\"<#if foreignKeyCol.javaClass.classLoader??>${foreignKeyCol.javaClass.name}<#else>${foreignKeyCol.javaClass.simpleName}</#if>\">\r\n        DELETE FROM `${model.tableOriginalName}`\r\n        WHERE `${foreignKeyCol.columnName}` = <@hash foreignKeyCol.fieldName + \",jdbcType=\" + foreignKeyCol.jdbcType/>\r\n    </delete>\r\n\t</#list>\r\n</#if>\r\n\r\n    <delete id=\"deleteByMap\" parameterType=\"Map\">\r\n        DELETE FROM `${model.tableOriginalName}`\r\n        <where>\r\n        <#list model.columns as col>\r\n            <if test=\"${col.fieldName} != null\">\r\n                AND `${col.columnName}` = <@hash col.fieldName + \",jdbcType=\" + col.jdbcType/>\r\n            </if>\r\n        </#list>\r\n        </where>\r\n    </delete>\r\n\r\n    <resultMap id=\"BaseResultMap\" type=\"${context.modelPackage}.${model.modelName}\">\r\n<#list model.columns as col>\r\n    <#if col.primaryKey>\r\n        <id column=\"${col.columnName}\" property=\"${col.fieldName}\" jdbcType=\"${col.jdbcType}\"/>\r\n    <#else >\r\n        <result column=\"${col.columnName}\" property=\"${col.fieldName}\" jdbcType=\"${col.jdbcType}\"/>\r\n    </#if>\r\n</#list>\r\n    </resultMap>\r\n\r\n    <sql id=\"Base_Column_List\">\r\n        <#list model.columns as col><#if !col?is_first>,<#if col?index%4==0>\r\n        <#else>${' '}</#if></#if>`${col.columnName}`</#list>\r\n    </sql>\r\n\r\n    <sql id=\"Base_Column_List_Without_PrimaryKey\">\r\n        <#list model.columnsWithoutPrimaryKey as col><#if !col?is_first>,<#if col?index%4==0>\r\n        <#else>${' '}</#if></#if>`${col.columnName}`</#list>\r\n    </sql>\r\n</mapper>\r\n",
          "fileNameExpression": "X${model.modelName}Mapper.xml",
          "uid": 1572424943987,
          "status": "success"
        },
        {
          "index": "0",
          "type": "mapper",
          "name": "mapper_cls_empty.ftl",
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"${model.modelName}Mapper\">\r\n\r\n</mapper>\r\n",
          "fileNameExpression": "${model.modelName}Mapper.xml",
          "uid": 1572424943988,
          "status": "success"
        }
      ],
      "mapperFileNames": [
        "X${model.modelName}Mapper.xml",
        "${model.modelName}Mapper.xml"
      ],
      "modelEnable": true,
      "modelFiles": [
        {
          "index": "0",
          "type": "model",
          "name": "model_lombok.ftl",
          "content": "package ${context.modelPackage};\r\n\r\nimport lombok.*;\r\n\r\n<#list model.imports as imp>\r\nimport ${imp};\r\n</#list>\r\n\r\n/**\r\n * @author Washmore\r\n * @version V1\r\n * @summary ${model.tableName}表<#if 0 < model.tableComment?length>(</#if>${model.tableComment}<#if 0 < model.tableComment?length>)</#if>的model\r\n * @Copyright (c) ${.now?date?string[\"yyyy\"]}, Washmore All Rights Reserved.\r\n * @since ${.now?date?string[\"yyyy年MM月dd日\"]}\r\n */\r\n@Data\r\n@ToString\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class ${model.modelName} implements java.io.Serializable {\r\n    private static final long serialVersionUID = ${randomLong?string[\"0\"]}L;\r\n<#list model.columns as col>\r\n    /**\r\n     * ${col.columnName}<#if 0 < col.coloumComment?length>(</#if>${col.coloumComment}<#if 0 < col.coloumComment?length>)</#if> 默认值:${col.defaultValue}\r\n     */\r\n    private ${col.javaClass.simpleName} ${col.fieldName};\r\n</#list>\r\n}",
          "fileNameExpression": "${model.modelName}.java",
          "uid": 1566181257742,
          "status": "success"
        }
      ],
      "modelFileNames": [
        "${model.modelName}.java"
      ],
      "otherFiles": [],
      "variables": [
        {
          "key": "daoManagerPackage",
          "value": "com.ke.huaqiao.server.config"
        },
        {
          "key": "daoManagerName",
          "value": "DaoManagement"
        },
        {
          "key": "sqlSessionCommon",
          "value": "sqlSessionCommon"
        },
        {
          "key": "sqlSessionReadonly",
          "value": "sqlSessionReadonly"
        }
      ]
    },
    "dbConfig": {
      "url": "jdbc:mysql://10.8.1.227:3306/huaqiao?allowMultiQueries=true&autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8&zeroDateTimeBehavior=convertToNull",
      "username": "huaqiao",
      "password": "2101901166"
    },
    "currentStep": 0,
    "timeStamp": " < huaqiao > 2019年12月27日 17:39:17"
  }
]